#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct books{
    char* num;
    char* author;
    char* title;
    char* qf;
    char* qt;
};
int quantity(FILE*);

char* scan(int*, FILE*);

struct books* input(struct books*, FILE*);

void show(struct books*, int);

char* scan_console();

void input_file(int, FILE*, struct books*);

void delete(FILE*, struct books*, int);

void refresh(FILE*, struct books*, int);

void search(FILE*, struct books*, int);

int page_proofs(char*);

int char_to_int(char*);

void shell(int , int*);

char* int_to_char(int);

void swap(char* ,char*);

void sort(FILE *, struct books*, int);

int main() {
    int v;
    FILE *file = fopen("books.csv", "a+");
    printf("Choose an option :\n");
    printf("1. Show all books\n");
    printf("2. Add a book\n");
    printf("3. Delete book\n");
    printf("4. Find a book\n");
    printf("5. Exit\n");
    int digit;
    struct books *book = malloc(1 * sizeof(struct books));
    digit = quantity(file);
    book = input(book, file);
    scanf("%d", &v);
    while (1) {
        switch (v) {
            case 1:
                v = 0;
                sort(file, book, digit);
                show(book, digit);
                fclose(file);
                scanf("%d", &v);
                break;
            case 2:
                v = 0;
                getchar();
                input_file(digit + 1, file, book);
                fclose(file);
                scanf("%d", &v);
                break;
            case 3:
                v = 0;
                getchar();
                delete(file, book, digit);
                fclose(file);
                FILE *f = fopen("books.csv", "w");
                refresh(f, book, digit - 1);
                fclose(file);
                scanf("%d", &v);
                break;
            case 4:
                v = 0;
                getchar();
                search(file, book, digit);
                fclose(file);
                scanf("%d", &v);
                break;
            case 5:
                free(book);
                return (0);
        }
    }
}


int quantity(FILE* fp){
    int n = 1;
    char c = fgetc(fp);
    while (c != EOF){
        if (c == '\n') n++;
        c = fgetc(fp);
    }
    rewind(fp);
    return(n);
}

struct books* input(struct books* book, FILE* fp)
{
    int n = 0;
    int checker = 0;
    while (checker != 1)
    {
        book[n].num = scan(&checker, fp);
        book[n].author = scan(&checker, fp);
        book[n].title = scan(&checker, fp);
        book[n].qf = scan(&checker, fp);
        book[n].qt = scan(&checker, fp);
        n++;
        book = realloc(book, (n + 1) * sizeof(struct books));
    }
    return(book);
}

char* scan(int* checker, FILE* fp)
{
    int i = 0;
    char c;
    char* str = malloc(1 * sizeof(char));
    while ((c = getc(fp)) != ';' && c != '\n' && c != EOF)
    {
        *(str + i) = c;
        i++;
        str = realloc(str, (i + 1) * sizeof(char));
    }
    *(str + i) = '\0';
    if (c == EOF)
        *checker = 1;
    return(str);
}

void show(struct books* book, int n)
{
    int a;
    int j = 0;
    printf("+--------------+-------------------+-----------------+--------------+--------------+\n");
    printf("|     ISBN     |       Author      |      Title      |     Free     |     Taken    |\n");
    printf("+--------------+-------------------+-----------------+--------------+--------------+\n");
    for (int i = 0; i < n; ++i)
    {
        printf("+--------------+-------------------+-----------------+--------------+--------------+\n");
        a = 14 - page_proofs(book[i].num);
        printf("|%s",book[i].num);
        for (j = 0; j < a; ++j) {
            printf(" ");
        }
        printf("|%s", book[i].author);
        a = 19 - page_proofs(book[i].author);
        for (j = 0; j < a; ++j) {
            printf(" ");
        }
        printf("|%s", book[i].title);
        a = 17 - page_proofs(book[i].title);
        for (j = 0; j < a; ++j) {
            printf(" ");
        }
        printf("|%s", book[i].qf);
        a = 14 - page_proofs(book[i].qf);
        for (j = 0; j < a; ++j) {
            printf(" ");
        }
        printf("|%s", book[i].qt);
        a = 14 - page_proofs(book[i].qt);
        for (j = 0; j < a; ++j) {
            printf(" ");
        }
        printf("|\n");
        printf("+--------------+-------------------+-----------------+--------------+--------------+\n");
    }
}

char* scan_console()
{
    int i = 0;
    char c;
    char* str = malloc(1 * sizeof(char));
    while ((c = getchar()) != ';' && c != '\n' && c != EOF)
    {
        *(str + i) = c;
        i++;
        str = realloc(str, (i + 1) * sizeof(char));
    }
    *(str + i) = '\0';
    return (str);
}

void input_file(int digit, FILE* fp, struct books* book){
    printf("Input book info:\n");
    book = realloc(book, (digit + 1) * sizeof(struct books));
    book[digit].num = scan_console();
    book[digit].author = scan_console();
    book[digit].title = scan_console();
    book[digit].qf = scan_console();
    book[digit].qt = scan_console();
    fprintf(fp, "\n%s;%s;%s;%s;%s", book[digit].num, book[digit].author, book[digit].title, book[digit].qf, book[digit].qt);
    printf("Book successfully added\n");
}

void delete(FILE* fp, struct books* book, int n){
    printf("\nEnter an ISBN code of a book you want to delete:\n");
    int i = 0;
    int index;
    char c;
    char* str = malloc(1 * sizeof(char));
    while ((c = getchar()) != '\n')
    {
        *(str + i) = c;
        i++;
        str = realloc(str, (i + 1) * sizeof(char));
    }
    *(str + i) = '\0';
    for (i = 0; i < n; i++) {
        if (strcmp (book[i].num, str) == 0) index = i;
    }
    for (i = index; i < n - 1; ++i) {
        book[i].num = book[i + 1].num;
        book[i].author = book[i + 1].author;
        book[i].title = book[i + 1].title;
        book[i].qf = book[i + 1].qf;
        book[i].qt = book[i + 1].qt;
    }
    book[n].num = NULL;
    book[n].author = NULL;
    book[n].title = NULL;
    book[n].qf = NULL;
    book[n].qt = NULL;
}

void refresh(FILE* fp, struct books* book, int n){
    book = realloc(book, (n) * sizeof(struct books));
    for (int i = 0; i < n - 1; ++i) {
        fprintf(fp, "%s;%s;%s;%s;%s\n", book[i].num, book[i].author, book[i].title, book[i].qf, book[i].qt);
    }
    fprintf(fp, "%s;%s;%s;%s;%s", book[n - 1].num, book[n - 1].author, book[n - 1].title, book[n - 1].qf, book[n - 1].qt);
    printf("Book successfully deleted\n");
}

void search(FILE* fp, struct books* book, int n) {
    printf("\nEnter an ISBN code of a book you want to find:\n");
    int i = 0;
    int index = -1;
    char c;
    char* str = malloc(1 * sizeof(char));
    while ((c = getchar()) != '\n')
    {
        *(str + i) = c;
        i++;
        str = realloc(str, (i + 1) * sizeof(char));
    }
    *(str + i) = '\0';
    for (i = 0; i < n; i++) {
        if (strcmp (book[i].num, str) == 0) index = i;
    }
    if (index == -1) printf("There is no book with this parameters\n");
    else {
        printf("Here is your book :\n");
        printf("%s %s %s %s %s\n", book[index].num, book[index].author, book[index].title, book[index].qf, book[index].qt);
    }
}

int page_proofs(char* str){
    char c = str[0];
    int i = 1;
    while(c != '\0'){
        i++;
        c = str[i];
    }
    return(i);
}

int char_to_int(char* str){
    int digit = 0;
    int i = 0;
    while (str[i] != '\0') {
        digit = digit * 10;
        digit = digit + (str[i] - '0');
        i++;
    }
    return digit;
}

void shell(int n, int* mass)
{
    int i, j, step;
    int tmp;
    for (step = n / 2; step > 0; step /= 2)
        for (i = step; i < n; i++)
        {
            tmp = mass[i];
            for (j = i; j >= step; j -= step)
            {
                if (tmp < mass[j - step])
                    mass[j] = mass[j - step];
                else
                    break;
            }
            mass[j] = tmp;
        }
}

char* int_to_char(int digit){
    int n = 0;
    int* d = malloc(1 * sizeof(int));
    char* str = malloc(1 * sizeof(char));
    while (digit> 0) {
        n++;
        d[n - 1] = digit % 10;
        d = realloc(d, (n + 1) * sizeof(int));
        digit = digit / 10;
    }
    str = realloc(str, n * sizeof(char));
    for (int i = 0; i < n; ++i) {
        str[i] = d[n - i - 1] + '0';
    }
    str[n] = '\0';
    return(str);
}

void sort(FILE *fp, struct books* book, int n){
    char* s;
    int i = 0;
    int k = 0;
    int* num = malloc(n * sizeof(int));
    for (i = 0; i < n; ++i) {
        num[i] = char_to_int(book[i].num);
    }
    shell(n, num);
    for (i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (strcmp(int_to_char(num[i]), book[j].num) == 0) {
               s = book[k].num;
               book[k].num = book[j].num;
               book[j].num = s;
               s = book[k].author;
               book[k].author = book[j].author;
               book[j].author = s;
               s = book[k].title;
               book[k].title = book[j].title;
               book[j].title = s;
               s = book[k].qf;
               book[k].qf = book[j].qf;
               book[j].qf = s;
               s = book[k].qt;
               book[k].qt = book[j].qt;
               book[j].qt = s;
            }
        }
        k++;
    }
}
